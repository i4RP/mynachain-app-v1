{"version":3,"sources":["Api.tsx","rpc.ts","Home.tsx","NewAccount.tsx","Mint.tsx","Send.tsx","Detail.tsx","Appbar.tsx","Loader.tsx","Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["api","ApiContext","React","createContext","Api","children","useState","isReady","setIsReady","isApiConnected","setIsApiConnected","isInitialized","setIsInitialized","useEffect","provider","WsProvider","localStorage","destination","ApiPromise","types","cert","id","nonce","tbs","signature","Tx","_enum","CreateAccount","Send","Mint","Other","TxCreateAccount","TxSend","to","amount","TxMint","uNonce","on","Provider","value","useApi","useContext","call","method","a","params","axios","url","timeout","data","jsonrpc","result","error","Error","message","Reader","name","this","Card","fd","pin","hashHex","sig","map","r","currentCard","Home","history","useHistory","addToast","useToasts","readers","setReaders","openReader","open","card","appearance","autoDismiss","toString","getCardStatus","getStatus","console","log","getReaders","then","e","Container","List","subheader","ListSubheader","component","ListItem","button","key","onClick","ListItemIcon","ListItemText","primary","Divider","push","keyring","Keyring","type","useStyles","makeStyles","root","margin","backdrop","zIndex","color","i2h","il","i","slice","join","NewAccount","loading","setLoading","send","getCert","forHash","tx","mynaChainModule","go","hash","args","toHex","computeSig","submittable","alice","addFromUri","signAndSend","isCompleted","events","length","forEach","m","msg","event","meta","maxWidth","className","Button","variant","fullWidth","Backdrop","CircularProgress","useIntInput","initial","set","isNumber","test","onChange","target","from","TextField","label","placeholder","InputProps","endAdornment","InputAdornment","position","disabled","Detail","useParams","balance","setBalance","setNonce","setCert","query","res","toNumber","accounts","multiline","rows","startIcon","window","form","backgroundColor","borderRadius","display","input","marginLeft","icon","pointerEvents","height","alignItems","justifyContent","grow","flexGrow","Appbar","classes","setId","AppBar","Toolbar","Typography","onSubmit","preventDefault","InputBase","parseInt","LoaderStyle","textAlign","Loader","style","Router","path","exact","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fab08391.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\n\nimport { ApiPromise, WsProvider } from \"@polkadot/api\";\n\ninterface Props {\n  children: React.ReactNode;\n}\nexport interface ApiProps {\n  api: ApiPromise;\n  isApiConnected: boolean;\n  isReady: boolean;\n}\nlet api: ApiPromise;\nconst ApiContext = React.createContext({} as ApiProps);\n\nexport { api };\nexport default function Api({\n  children\n}: Props): React.ReactElement<Props> | null {\n  const [isReady, setIsReady] = useState(false);\n  const [isApiConnected, setIsApiConnected] = useState(false);\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  useEffect((): void => {\n    const provider = new WsProvider(\n      localStorage.destination || \"wss://d2xzrplr2rvva4.cloudfront.net\"\n    );\n    api = new ApiPromise({\n      provider,\n      types: {\n        \"types::AccountId\": \"u64\",\n        \"types::Account\": {\n          cert: \"Vec<u8>\",\n          id: \"types::AccountId\",\n          nonce: \"u64\"\n        },\n        \"types::Balance\": \"u64\",\n        \"types::SignedData\": {\n          tbs: \"Tx\",\n          signature: \"types::Signature\",\n          id: \"types::AccountId\"\n        },\n        \"types::Signature\": \"Vec<u8>\",\n        Tx: {\n          _enum: {\n            CreateAccount: \"TxCreateAccount\",\n            Send: \"TxSend\",\n            Mint: \"TxMint\",\n            Other: null\n          }\n        },\n        TxCreateAccount: {\n          cert: \"Vec<u8>\",\n          nonce: \"uNonce\"\n        },\n        TxSend: {\n          to: \"types::AccountId\",\n          amount: \"types::Balance\",\n          nonce: \"uNonce\"\n        },\n        TxMint: {\n          amount: \"types::Balance\",\n          nonce: \"uNonce\"\n        },\n        uNonce: \"u64\"\n      }\n    });\n\n    api.on(\"connected\", (): void => setIsApiConnected(true));\n    api.on(\"disconnected\", (): void => setIsApiConnected(false));\n    api.on(\"ready\", (): void => {\n      setIsReady(true);\n    });\n    setIsInitialized(true);\n  }, []);\n  if (!isInitialized) {\n    return null;\n  }\n  return (\n    <ApiContext.Provider value={{ api, isApiConnected, isReady }}>\n      {children}\n    </ApiContext.Provider>\n  );\n}\nexport function useApi(): ApiProps {\n  return useContext(ApiContext);\n}\n","import axios from \"axios\";\n\nlet id = 0;\n\nexport default async function call<T = any>(\n  method: string,\n  params: any = null\n): Promise<T> {\n  id++;\n  const result = await axios({\n    method: \"post\",\n    url: \"http://localhost:3030\",\n    timeout: 10000,\n    data: {\n      jsonrpc: \"2.0\",\n      id,\n      method,\n      params\n    }\n  });\n  if (result.data.error) {\n    throw new Error(result.data.error.message);\n  }\n  return result.data.result;\n}\n\nexport class Reader {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  async open(): Promise<Card> {\n    const result = await call<number>(\"openReader\", [this.name]);\n    return new Card(result);\n  }\n}\nexport class Card {\n  fd: number;\n  constructor(fd: number) {\n    this.fd = fd;\n  }\n\n  async getStatus(): Promise<any> {\n    if (this.fd < 0) throw new Error(\"Card not selected\");\n    const result = await call<{ name: string[]; atr: any }>(\"getStatus\", [\n      this.fd\n    ]);\n    return result;\n  }\n  async getCert(): Promise<any> {\n    if (this.fd < 0) throw new Error(\"Card not selected\");\n    const result = await call<{ cert: string }>(\"getCert\", [this.fd]);\n    return result.cert;\n  }\n  async computeSig(pin: string, hashHex: string): Promise<any> {\n    if (this.fd < 0) throw new Error(\"Card not selected\");\n\n    /*\n    let em = Buffer.allocUnsafe(128).fill(0xff) // 0xff-initialized buffer that is as long as pubkey\n    // EM = 0x00 || 0x01 || PS || 0x00 || T\n    em[0] = 0x00;\n    em[1] = 0x01;\n    // 0x00 || T = 0x00 || prefix || hashed\n    let zeroT = Buffer.from(\"003031300d060960864801650304020105000420\" + hashHex, \"hex\")\n\n    zeroT.copy(em, em.length - zeroT.length)\n    */\n\n    // only SHA256 hash is accepted\n    const result = await call<{ sig: string }>(\"computeSig\", [\n      this.fd,\n      pin,\n      \"3031300d060960864801650304020105000420\" + hashHex\n    ]);\n    return result.sig;\n  }\n  async reconnect(): Promise<null> {\n    if (this.fd < 0) throw new Error(\"Card not selected\");\n    await call(\"reconnect\", [this.fd]);\n    return null;\n  }\n}\nexport async function getReaders(): Promise<Reader[]> {\n  const result = await call<string[]>(\"getReaders\");\n  return result.map(r => new Reader(r));\n}\n\nlet currentCard: Card = new Card(-1);\n\nexport { currentCard };\n","import React, { useState, useEffect } from \"react\";\n\nimport {\n  Button,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  ListSubheader,\n  Container\n} from \"@material-ui/core\";\nimport CardIcon from \"@material-ui/icons/CreditCard\";\nimport { useApi } from \"./Api\";\nimport { useHistory } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { getReaders, Reader, currentCard } from \"./rpc\";\n\nexport default function Home() {\n  const { api } = useApi();\n  const history = useHistory();\n  const { addToast } = useToasts();\n  const [readers, setReaders] = useState<Reader[]>([]);\n  const openReader = async (r: Reader) => {\n    try {\n      const card = await r.open();\n      currentCard.fd = card.fd;\n      addToast(\n        `Successfully opened reader ${r.name} as descriptor ${card.fd}!`,\n        {\n          appearance: \"success\",\n          autoDismiss: true\n        }\n      );\n    } catch (e) {\n      addToast(`Opening reader failed: ${e.toString()}`, {\n        appearance: \"error\",\n        autoDismiss: true\n      });\n    }\n  };\n  const getCardStatus = async () => {\n    try {\n      const result = await currentCard.getStatus();\n      console.log(result);\n      addToast(`Please see console`, {\n        appearance: \"success\",\n        autoDismiss: true\n      });\n    } catch (e) {\n      addToast(`Error occured: ${e.toString()}`, {\n        appearance: \"error\",\n        autoDismiss: true\n      });\n    }\n  };\n  useEffect(() => {\n    getReaders().then(\n      r => {\n        setReaders(r);\n      },\n      e => {\n        addToast(`Daemon is not started.`, {\n          appearance: \"error\",\n          autoDismiss: true\n        });\n      }\n    );\n  }, []);\n  return (\n    <Container>\n      <h1>マイナンバーチェーン</h1>\n      <List\n        subheader={\n          <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n            利用可能なカードリーダー\n          </ListSubheader>\n        }\n      >\n        {readers.map(r => (\n          <ListItem\n            button\n            key={r.name}\n            onClick={() => {\n              openReader(r);\n            }}\n          >\n            <ListItemIcon>\n              <CardIcon />\n            </ListItemIcon>\n            <ListItemText primary={r.name} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List\n        subheader={\n          <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n            What will you do next?\n          </ListSubheader>\n        }\n      >\n        <ListItem button onClick={() => history.push(\"/newaccount\")}>\n          新しいアカウントを作成\n        </ListItem>\n        <ListItem button onClick={() => history.push(\"/mint\")}>\n          残高を発行\n        </ListItem>\n        <ListItem button onClick={() => history.push(\"/Send\")}>\n          送金\n        </ListItem>\n      </List>\n      <Divider />\n      <List\n        subheader={\n          <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n            Explore / Inspect\n          </ListSubheader>\n        }\n      >\n        <ListItem button>Under Construction</ListItem>\n      </List>\n      <Divider />\n      <List\n        subheader={\n          <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n            デバッグ\n          </ListSubheader>\n        }\n      >\n        <ListItem button onClick={() => getCardStatus()}>\n          カードステータスを取得\n        </ListItem>\n      </List>\n    </Container>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Container,\n  Backdrop,\n  CircularProgress\n} from \"@material-ui/core\";\nimport { useApi } from \"./Api\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Keyring } from \"@polkadot/api\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { currentCard } from \"./rpc\";\n\nconst keyring = new Keyring({ type: \"sr25519\" });\nconst useStyles = makeStyles({\n  root: {\n    \"& > *\": {\n      margin: \"10px\"\n    }\n  },\n  backdrop: {\n    zIndex: 3,\n    color: \"#fff\"\n  }\n});\n\nconst i2h = (il: number[]) =>\n  \"0x\" + il.map(i => (\"0\" + i.toString(16)).slice(-2)).join(\"\");\nexport default function NewAccount() {\n  const { api } = useApi();\n  const { root, backdrop } = useStyles();\n  const { addToast } = useToasts();\n  const [loading, setLoading] = useState(false);\n\n  const send = async () => {\n    setLoading(true);\n    try {\n      addToast(\"Retrieving a certificate\", {\n        appearance: \"info\",\n        autoDismiss: true\n      });\n      const cert = (await currentCard.getCert()) as number[];\n      const forHash: any = api.tx.mynaChainModule.go({\n        signature: \"0x00\",\n        id: 0,\n        tbs: {\n          CreateAccount: {\n            cert: i2h(cert),\n            nonce: 0\n          }\n        }\n      });\n\n      let hash = forHash.args[0][\"tbs\"].hash.toHex();\n      addToast(\"Computing a signature\", {\n        appearance: \"info\",\n        autoDismiss: true\n      });\n      const sig = (await currentCard.computeSig(\n        localStorage.pin as string,\n        hash.slice(2)\n      )) as number[];\n      const submittable = api.tx.mynaChainModule.go({\n        signature: i2h(sig),\n        id: 0,\n        tbs: {\n          CreateAccount: {\n            cert: i2h(cert),\n            nonce: 0\n          }\n        }\n      });\n      const alice = keyring.addFromUri(\"//Alice\", { name: \"Alice default\" });\n      addToast(\"Waiting for the Events\", {\n        appearance: \"info\",\n        autoDismiss: true\n      });\n      submittable.signAndSend(alice, e => {\n        console.log(e);\n        if (e.isCompleted) setLoading(false);\n        if (e.events.length == 0) return;\n        e.events.forEach((m: any) => {\n          const msg = m.event.meta.name.toString();\n          addToast(msg, {\n            appearance: \"success\",\n            autoDismiss: true\n          });\n        });\n      });\n    } catch (e) {\n      setLoading(false);\n      addToast(e.toString(), {\n        appearance: \"error\",\n        autoDismiss: true\n      });\n    }\n  };\n  return (\n    <>\n      <Container maxWidth=\"sm\" className={root}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth={true}\n          onClick={send}\n        >\n          アカウント作成\n        </Button>\n      </Container>\n      <Backdrop className={backdrop} open={loading}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Container,\n  TextField,\n  InputAdornment\n} from \"@material-ui/core\";\nimport { useApi } from \"./Api\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Keyring } from \"@polkadot/api\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { currentCard } from \"./rpc\";\nconst keyring = new Keyring({ type: \"sr25519\" });\nconst useStyles = makeStyles({\n  root: {\n    \"& > *\": {\n      margin: \"10px\"\n    }\n  }\n});\nconst i2h = (il: number[]) =>\n  \"0x\" + il.map(i => (\"0\" + i.toString(16)).slice(-2)).join(\"\");\nexport default function Mint() {\n  const { api } = useApi();\n  const { root } = useStyles();\n  const { addToast } = useToasts();\n  const [loading, setLoading] = useState(false);\n\n  const useIntInput = (initial: number) => {\n    const [value, set] = useState(initial);\n    let isNumber = /^[0-9]*$/.test(value.toString());\n\n    return {\n      value,\n      onChange: (e: any) => set(e.target.value),\n      error: !isNumber\n    };\n  };\n\n  const from = useIntInput(0);\n  const amount = useIntInput(0);\n  const [log, setLog] = useState(\"\");\n  const [hash, setHash] = useState(\"\");\n\n  const send = async () => {\n    setLoading(true);\n    try {\n      const forHash: any = api.tx.mynaChainModule.go({\n        signature: \"0x00\",\n        id: from.value,\n        tbs: {\n          Mint: {\n            amount: amount.value,\n            nonce: 0\n          }\n        }\n      });\n\n      let hash = forHash.args[0][\"tbs\"].hash.toHex();\n      addToast(\"Computing a signature\", {\n        appearance: \"info\",\n        autoDismiss: true\n      });\n      const sig = (await currentCard.computeSig(\n        \"1919\",\n        hash.slice(2)\n      )) as number[];\n      const submittable = api.tx.mynaChainModule.go({\n        signature: i2h(sig),\n        id: from.value,\n        tbs: {\n          Mint: {\n            amount: amount.value,\n            nonce: 0\n          }\n        }\n      });\n      const alice = keyring.addFromUri(\"//Alice\", { name: \"Alice default\" });\n      addToast(\"Waiting for the Events\", {\n        appearance: \"info\",\n        autoDismiss: true\n      });\n      submittable.signAndSend(alice, e => {\n        console.log(e);\n        if (e.isCompleted) setLoading(false);\n        if (e.events.length == 0) return;\n        e.events.forEach((m: any) => {\n          const msg = m.event.meta.name.toString();\n          addToast(msg, {\n            appearance: \"success\",\n            autoDismiss: true\n          });\n        });\n      });\n    } catch (e) {\n      addToast(e.toString(), {\n        appearance: \"error\",\n        autoDismiss: true\n      });\n      setLoading(false);\n    }\n  };\n  return (\n    <Container maxWidth=\"sm\" className={root}>\n      <TextField\n        label=\"あなたのアカウント番号\"\n        fullWidth={true}\n        placeholder=\"整数\"\n        {...from}\n      />\n      <TextField\n        label=\"発行数量\"\n        fullWidth={true}\n        placeholder=\"整数\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">マイナコイン</InputAdornment>\n          )\n        }}\n        {...amount}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth={true}\n        onClick={send}\n        disabled={from.error || amount.error}\n      >\n        発行\n      </Button>\n    </Container>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Button,\n  Container,\n  TextField,\n  InputAdornment\n} from \"@material-ui/core\";\nimport { useApi } from \"./Api\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Keyring } from \"@polkadot/api\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { currentCard } from \"./rpc\";\nconst keyring = new Keyring({ type: \"sr25519\" });\nconst useStyles = makeStyles({\n  root: {\n    \"& > *\": {\n      margin: \"10px\"\n    }\n  }\n});\nconst i2h = (il: number[]) =>\n  \"0x\" + il.map(i => (\"0\" + i.toString(16)).slice(-2)).join(\"\");\nexport default function Send() {\n  const { api } = useApi();\n  const { root } = useStyles();\n  const { addToast } = useToasts();\n  const [loading, setLoading] = useState(false);\n\n  const useIntInput = (initial: number) => {\n    const [value, set] = useState(initial);\n    let isNumber = /^[0-9]*$/.test(value.toString());\n\n    return {\n      value,\n      onChange: (e: any) => set(e.target.value),\n      error: !isNumber\n    };\n  };\n\n  const from = useIntInput(0);\n  const to = useIntInput(0);\n  const amount = useIntInput(0);\n  const [log, setLog] = useState(\"\");\n  const [hash, setHash] = useState(\"\");\n\n  const send = async () => {\n    setLoading(true);\n    try {\n      const forHash: any = api.tx.mynaChainModule.go({\n        signature: \"0x00\",\n        id: from.value,\n        tbs: {\n          Send: {\n            to: to.value,\n            amount: amount.value,\n            nonce: 0\n          }\n        }\n      });\n\n      let hash = forHash.args[0][\"tbs\"].hash.toHex();\n      addToast(\"Computing a signature\", {\n        appearance: \"info\",\n        autoDismiss: true\n      });\n      const sig = (await currentCard.computeSig(\n        \"1919\",\n        hash.slice(2)\n      )) as number[];\n      const submittable = api.tx.mynaChainModule.go({\n        signature: i2h(sig),\n        id: from.value,\n        tbs: {\n          Send: {\n            to: to.value,\n            amount: amount.value,\n            nonce: 0\n          }\n        }\n      });\n      const alice = keyring.addFromUri(\"//Alice\", { name: \"Alice default\" });\n      addToast(\"Waiting for the Events\", {\n        appearance: \"info\",\n        autoDismiss: true\n      });\n      submittable.signAndSend(alice, e => {\n        console.log(e);\n        if (e.isCompleted) setLoading(false);\n        if (e.events.length == 0) return;\n        e.events.forEach((m: any) => {\n          const msg = m.event.meta.name.toString();\n          addToast(msg, {\n            appearance: \"success\",\n            autoDismiss: true\n          });\n        });\n      });\n    } catch (e) {\n      addToast(e.toString(), {\n        appearance: \"error\",\n        autoDismiss: true\n      });\n      setLoading(false);\n    }\n  };\n  return (\n    <Container maxWidth=\"sm\" className={root}>\n      <TextField\n        label=\"あなたのアカウント番号\"\n        fullWidth={true}\n        placeholder=\"整数\"\n        {...from}\n      />\n      <TextField\n        label=\"相手のアカウント番号\"\n        fullWidth={true}\n        placeholder=\"整数\"\n        {...to}\n      />\n      <TextField\n        label=\"発行数量\"\n        fullWidth={true}\n        placeholder=\"整数\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">マイナコイン</InputAdornment>\n          )\n        }}\n        {...amount}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth={true}\n        onClick={send}\n        disabled={from.error || amount.error}\n      >\n        発行\n      </Button>\n    </Container>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Button, Container, TextField } from \"@material-ui/core\";\nimport { useApi } from \"./Api\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useParams } from \"react-router-dom\";\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\nconst useStyles = makeStyles({\n  root: {\n    \"& > *\": {\n      margin: \"10px\"\n    }\n  }\n});\n\nexport default function Detail() {\n  const { root } = useStyles();\n  const { id } = useParams();\n  const { api } = useApi();\n  const [balance, setBalance] = useState<number | null>(null);\n  const [nonce, setNonce] = useState<number | null>(null);\n  const [cert, setCert] = useState<string>(\"Not loaded\");\n  useEffect(() => {\n    api.query.mynaChainModule.balance(id).then((res: any) => {\n      setBalance(res.toNumber());\n    });\n    api.query.mynaChainModule.accounts(id).then((res: any) => {\n      setNonce(res.nonce.toNumber());\n      setCert(res.cert.toHex());\n    });\n  }, [id]);\n  const x509 = () => {\n    window.open(\"https://lapo.it/asn1js/#\" + cert.slice(2));\n  };\n  return (\n    <Container maxWidth=\"sm\" className={root}>\n      <h1>Account ID: {id}</h1>\n      <p>\n        アカウント{id}が所有する金額:{\" \"}\n        {balance + \" マイナコイン\" || \"not loaded\"}\n      </p>\n      <TextField\n        label=\"証明書\"\n        multiline\n        rows=\"6\"\n        disabled\n        variant=\"filled\"\n        fullWidth\n        value={cert}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        startIcon={<ArrowForwardIcon />}\n        onClick={x509}\n      >\n        証明書の中身を確認する\n      </Button>\n    </Container>\n  );\n}\n","import React, { useState } from \"react\";\nimport { AppBar, Toolbar, Typography, InputBase } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nconst useStyles = makeStyles({\n  form: {\n    backgroundColor: \"rgba(255,255,255,0.1)\",\n    margin: \"12px\",\n    borderRadius: \"5px\",\n    position: \"relative\",\n    display: \"flex\"\n  },\n  input: {\n    color: \"white\",\n    marginLeft: \"40px\"\n  },\n  icon: {\n    pointerEvents: \"none\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    marginLeft: \"10px\"\n  },\n  grow: {\n    flexGrow: 1\n  }\n});\nexport default function Appbar() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [id, setId] = useState(0);\n  const search = (e: any) => {\n    e.preventDefault();\n    history.push(\"/detail/\" + id);\n  };\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography\n          variant=\"h6\"\n          onClick={() => {\n            history.push(\"/\");\n          }}\n        >\n          マイナチェーン\n        </Typography>\n        <div className={classes.grow} />\n        <form onSubmit={search} className={classes.form}>\n          <div className={classes.icon}>\n            <SearchIcon />\n          </div>\n          <InputBase\n            className={classes.input}\n            onChange={e => {\n              setId(parseInt(e.target.value));\n            }}\n            id=\"standard-basic\"\n            placeholder=\"アカウントIDで検索\"\n          />\n        </form>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React, { useState, useEffect, CSSProperties } from \"react\";\nimport { CircularProgress } from '@material-ui/core';\nconst LoaderStyle = {\n  textAlign: \"center\"\n} as CSSProperties;\nexport default function Loader() {\n  return (\n    <div style={LoaderStyle}>\n      <CircularProgress />\n      <h1>Connecting to the Blockchain</h1>\n      <p>Blockchain might take you to the new world if the usage is correct.</p>\n      <p>\n        If the home screen show up, the node you are connecting is down. Please\n        consult connecting the another node.\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport NewAccount from \"./NewAccount\";\nimport Mint from \"./Mint\";\nimport Send from \"./Send\";\nimport Detail from \"./Detail\";\nimport Appbar from \"./Appbar\";\nimport { useApi } from \"./Api\";\nimport Loader from \"./Loader\";\n\nexport default function Router() {\n  const { isReady } = useApi();\n  //const isReady = true;\n\n  return (\n    <>\n      {isReady && (\n        <BrowserRouter>\n          <Appbar />\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/newAccount\" component={NewAccount} />\n          <Route path=\"/mint\" component={Mint} />\n          <Route path=\"/send\" component={Send} />\n          <Route path=\"/detail/:id\" component={Detail} />\n        </BrowserRouter>\n      )}\n      {!isReady && <Loader />}\n    </>\n  );\n}\n","import React from 'react';\nimport { ToastProvider } from 'react-toast-notifications'\nimport Api from \"./Api\";\nimport Router from \"./Router\";\n\nconst App = () => {\n  return (\n    <Api>\n      <ToastProvider>\n        <Router />\n      </ToastProvider>\n    </Api>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}